<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kdl.nlfdc.persistence.BasicMapper">

	<select id="getVisitCount" parameterType="int" resultType="VisitCount" >
		select
			*
		from
			visit_count
		where
			day = #{day}
	</select>
	
	<select id="getSumVisitCount" resultType="int" >
		select
			SUM(count)
		from
			visit_count
	</select>
	
	<insert id="insertVisitCount" parameterType="VisitCount" >
		insert into visit_count
			(day, count)
		values
			(#{day}, #{count})
	</insert>
	
	<update id="updateVisitCount" parameterType="VisitCount" >
		update
			visit_count
		set
			count = #{count}
		where
			day = #{day}
	</update>
	
	<select id="getFirstMenu" parameterType="int" resultType="FirstMenu">
		select
			*
		from
			first_menu
		where
			firstMenuId = #{firstMenuId}
	</select>	
	
	<select id="getAllFirstMenu" resultType="FirstMenu">
		select
			*
		from
			first_menu
	</select>
	
	<select id="getAllFirstMenuWithSecondMenu" resultType="FirstMenuWithSecondMenu">
		select
			*
		from
			first_menu
	</select>
	
	<select id="getSecondMenu" parameterType="int" resultType="SecondMenu">
		select
			*
		from
			second_menu
		where
			secondMenuId = #{secondMenuId}
	</select>
	
	<select id="getSecondMenuByFirstMenuId" parameterType="int" resultType="SecondMenu">
		select
			*
		from
			second_menu
		where
			firstMenuId = #{firstMenuId}
	</select>
	
	<select id="getAdminMenus" parameterType="int" resultType="AdminMenu" >
		select
			admin_menu.*, first_menu.firstMenuName
		from
			admin_menu join first_menu using (firstMenuId)
		where
			adminId = #{adminId}
	</select>

	<select id="getAdminByAdminId" parameterType="int" resultType="Admin">
		select
			*
		from 
			admin
		where
			adminId = #{adminId }
	</select>	
	
	<select id="getAdminByLoginName" parameterType="String" resultType="Admin">
		select
			*
		from
			admin
		where
			loginName = #{loginName }
			and isDeleted = 0
	</select>
	
	<select id="getAllCommonAdmin" resultType="Admin">
		select
			*
		from
			admin
		where
			adminRole = 1
	</select>
	
	<update id="disableAdmin" parameterType="int">
		update admin
	    set isDeleted = 1
	    where adminId = #{adminId}
	</update>
	
	<update id="enableAdmin" parameterType="int">
		update admin
	    set isDeleted = 0
	    where adminId = #{adminId}
	</update>

	<select id="getAdminNotificationCount" parameterType="int" resultType="int">
		select
			count(*)
		from
			notification
		where
			true
			<if test="firstMenuId != 0">
			and firstMenuId = #{firstMenuId}
			</if>
			<if test="secondMenuId != 0">
			and secondMenuId = #{secondMenuId}
			</if>
			order by createTime desc
	</select>

	<select id="getAdminNotificationList" parameterType="int" resultType="Notification">
		select
			notification.*, second_menu.secondMenuName
		from
			notification join second_menu using(secondMenuId)
		where
			true
			<if test="firstMenuId != 0">
			and notification.firstMenuId = #{firstMenuId}
			</if>
			<if test="secondMenuId != 0">
			and notification.secondMenuId = #{secondMenuId}
			</if>
			order by createTime desc
			limit 
			#{limitBegin}, #{pageSize}
	</select>

<select id="getCommonNotificationCount" parameterType="int" resultType="int">
		select
			count(*)
		from
			notification
		where
			isDeleted = 0
			<if test="firstMenuId != 0">
			and firstMenuId = #{firstMenuId}
			</if>
			<if test="secondMenuId != 0">
			and secondMenuId = #{secondMenuId}
			</if>
			order by createTime desc
	</select>

	<select id="getCommonNotificationList" parameterType="int" resultType="Notification">
		select
			notification.*, second_menu.secondMenuName
		from
			notification join second_menu using(secondMenuId)
		where
			notification.isDeleted = 0
			<if test="firstMenuId != 0">
			and notification.firstMenuId = #{firstMenuId}
			</if>
			<if test="secondMenuId != 0">
			and notification.secondMenuId = #{secondMenuId}
			</if>
			order by createTime desc
			limit 
			#{limitBegin}, #{pageSize}
	</select>
	
	<insert id="insertNotification" useGeneratedKeys="true" keyProperty="notificationId" parameterType="Notification">
		insert into notification 
			(firstMenuId, secondMenuId, creatorId, createTime, title, content) 
		values 
			(#{firstMenuId}, #{secondMenuId}, #{creatorId }, #{createTime }, #{title }, #{content })
	</insert>
	
	<update id="deleteNotification" parameterType="int" >
		update 
			notification
		set 
			isDeleted = 1
		where
			notificationId = #{notificationId}
	</update>

	<update id="unDeleteNotification" parameterType="int" >
		update 
			notification
		set 
			isDeleted = 0
		where
			notificationId = #{notificationId}
	</update>




	
	
	<!-- old  -->
    <select id="getTeacherListForAStudent" parameterType="int" resultType="User">
        select
            user.*
        from
            user_cls, user
        where
            user.userRole = 2
            and user.userId = user_cls.userId
            and user_cls.clsId in (
                select
                    clsId
                from
                    user_cls
                where
                    user_cls.userId = #{userId}
            )
        group by
            user_cls.userId
    </select>

    <delete id="deleteUser" parameterType="int">
        delete from user
        where userId = #{userId}
    </delete>
                    

    <select id="getCountOfSchoolMember" parameterType="int" resultType="int">
        select
            count(*)
        from
            user
        where
            schoolId = #{schoolId}
            and userRole = #{userRole}
            <if test="subjectId != 0">
                and userId in (
                    select teaId
                    from tea_subject
                    where subjectId = #{subjectId}
                )
            </if>
    </select>
  
    <select id="getUserIdListByPage" parameterType="int" resultType="User">
          select 	
              userId, userName
          from
              user
          where
              schoolId = #{schoolId}
              and userRole = #{userRole}
              <if test="subjectId != 0">
                  and userId in (
                     select teaId
                     from tea_subject
                     where subjectId = #{subjectId}
              	)
              </if>
          limit
              #{limitBegin}, #{pageSize}
    </select>

    <select id="getAllStudentsOfAClass" parameterType="int" resultType="User">
        select
            *
        from
            user_cls
            join user using (userId)
        where
            clsId = #{clsId}
            and userRole = 8
    </select>      

    <select id="getUser" parameterType="int" resultType="User">
        select
            *
        from
            user
        where
            user.userId = #{userId}
    </select>
   
    <select id="getUserByOpenid" parameterType="string" resultType="User">
        select
            *
        from
            user
        where
            user.openid = #{openid}
    </select>

    <select id="getUserByLoginIdAndSchoolId" parameterType="string" resultType="User">
        select
            *
        from
            user
        where
            user.loginId = #{loginId}
            <if test="schoolId != 0">
                and user.schoolId = #{schoolId }
            </if>
    </select>
       
    <select id="getUserByCellphoneAndSchoolId" parameterType="string" resultType="User">
        select
            *
        from
            user
        where
            user.cellphone = #{cellphone}
            <if test="schoolId != 0">
                and user.schoolId = #{schoolId }
            </if>
    </select>

    <select id="getUserByLoginNameAndSchoolId" parameterType="string" resultType="User">
        select
            *
        from
            user
        where
            user.loginName = #{loginName}
            <if test="schoolId != 0">
                and user.schoolId = #{schoolId }
            </if>
    </select>

    <select id="getUserByEmailAndSchoolId" parameterType="string" resultType="User">
        select
            *
        from
            user
        where
            user.email = #{email}
            <if test="schoolId != 0">
                and user.schoolId = #{schoolId }
            </if>
    </select>

    <select id="getUserByClassId" parameterType="int" resultType="User">
        select
            *
        from
            user
        where
            userId in (
                select userId
                from user_cls
                where clsId = #{clsId }
            )
        order by
            userRole ASC, userId ASC
    </select>

    <insert id="insertUserAndGetUserId" useGeneratedKeys="true" keyProperty="userId" parameterType="User">
        insert into user
            (loginId, loginName, email, cellphone, password, userName, userRole, schoolId, portraitUrl)
        values
            (#{loginId}, #{loginName}, #{email}, #{cellphone}, #{password}, #{userName}, #{userRole}, #{schoolId}, #{portraitUrl})
    </insert>

    <update id="updateUser" parameterType="User">
        update
            user
        set
            loginId = #{loginId},
            loginName = #{loginName},
            email = #{email},
            cellphone = #{cellphone},
            password = #{password},
            userName = #{userName},
            userRole = #{userRole},
            schoolId = #{schoolId},
            portraitUrl = #{portraitUrl}
        where
            userId = #{userId}
    </update>

    <update id="updateSchemaCache" parameterType="User">
        update
            user
        set
            cacheSubjectId = #{cacheSubjectId},
            cacheBookId = #{cacheBookId},
            cacheChapterId = #{cacheChapterId},
            cacheSectionId = #{cacheSectionId}
        where
            userId = #{userId}
    </update>

    <select id="getMachineLicense" parameterType="string" resultType="MachineLicense">
        select
            *
        from
            machine_license
        where
            machine_license.licenseCode = #{licenseCode}
    </select>

    <update id="updateMachineLicense" parameterType="MachineLicense">
        update
            machine_license
        set
            machineId = #{machineId},
            licenseResult = #{licenseResult}
        where
            licenseCode = #{licenseCode}
    </update>
   
    <select id="getSchoolUsers" parameterType="int" resultType="User">
        select
            user.userId,
            user.userName,
            user.email,
            user.password,
            user.loginId,
            user.loginName,
            user.schoolId,
            school.schoolName
        from
            user,school
        where
            user.schoolId = #{schoolId}
            and user.userRole = #{userRole}
            and user.schoolId = school.schoolId
    </select>   
	
	<!-- add cjia 2015.1.19 用户找回密码时添加一条记录 -->
	<insert id="insertUserFindPassword">
		insert into
			user_find_pwd (userId, time, isUsed )
		values 
			(#{userId}, #{time}, #{isUsed})
	</insert>		

    <select id="getLogin" parameterType="int" resultType="Login">
        select *
        from login
        where login.userId = #{userId}
    </select>

    <select id="getLoginByTokenId" parameterType="string" resultType="Login">
        select *
        from login
        where login.tokenId = #{tokenId}
    </select>

	<select id="getLoginByClientId" parameterType="string" resultType="Login">
        select *
        from login
        where login.clientId = #{clientId}
    </select>

    <update id="updateLogin" parameterType="Login">
        update
            login
        set
            tokenId = #{tokenId},
            loginTime = #{loginTime}
        where
            userId = #{userId}
    </update>
    
    <update id="updateClientId" parameterType="Login">
        update
            login
        set
            clientId = #{clientId},
            clientType = #{clientType}
        where
            userId = #{userId}
    </update>

    <update id="updateAndroidLogin" parameterType="Login">
        update
            login
        set
            tokenId = #{tokenId},
            androidId = #{androidId},
            loginTime = #{loginTime}
        where
            userId = #{userId}
    </update>

    <insert id="insertLogin" parameterType="Login">
        insert into login
            (userId, tokenId, loginTime)
        values
            (#{userId}, #{tokenId}, #{loginTime})
    </insert>

    <insert id="insertAndroidLogin" parameterType="Login">
        insert into login
            (userId, tokenId, loginTime, androidId)
        values
            (#{userId}, #{tokenId}, #{loginTime}, #{androidId})
    </insert>

    <delete id="deleteLogin" parameterType="int">
        delete from login
        where userId = #{userId}
    </delete>

    <!-- add cjia 2014.10.8 根据userId查询老师的收藏科目 -->
    <select id="getTextbookForTeacher" resultType="Book">
        select 
            book.*
        from
            book 
            join tea_book using (bookId)
        where
            teaId = #{userId }
    </select>

    <delete id="deleteTeacherTextbook">
        delete from
            tea_book
        where
            teaId = #{userId }
            and bookId = #{bookId }
    </delete>
   
    <insert id="insertTeacherTextbook" parameterType="TeaBook">
        insert into tea_book
            (teaId, bookId)
        values
            (#{teaId}, #{bookId})
    </insert>
	
	
	<!-- edit cjia 2015.1.12 -->   
    <!-- add cjia 2014.8.25 根据用户名搜索某个学校的所有用户 -->
    <select id="getUsersOfSchoolBySearchName" resultType="User">
        select
            userId, userName, email, loginId, loginName, userRole 
        from
            user
        where  
        	userRole = #{userRole }
        	and schoolId = #{schoolId}
            <if test="outClassId != 0">
            and userId in (
           		select userId from user_cls where clsId = #{outClassId}
           	)
            and userId not in (
            	select userId from user_cls where clsId = #{inClassId}
            )
            </if>
            <if test="outClassId == 0">
          	and userId not in (
            	select userId from user_cls where clsId in (
            			select clsId from cls where schoolId = #{schoolId}
            		)
            )
            </if>
            and instr(user.userName, #{searchName }) > 0
        order by
            userId ASC
    </select>

    <!-- edit cjia 2015.1.12  -->
    <select id="getUsersOutOfClassByRole" parameterType="int" resultType="User">
    	select
            userId, userName, email, loginId, loginName, userRole
        from
            user
        where
        	userRole = #{userRole}
        	and schoolId = #{schoolId}
            <if test="outClassId != 0">
           	and userId in (
           		select userId from user_cls where clsId = #{outClassId}
           	)
           	and userId not in (
            	select userId from user_cls where clsId = #{inClassId}
            )
            </if>
            <if test="outClassId == 0">
            and userId not in (
            	select userId from user_cls where clsId in (
            			select clsId from cls where schoolId = #{schoolId}
            		)
            )
            </if>
        order by
            userId ASC
    </select>
	
	<!-- add cjia 2015.1.12  根据classId、userRole查询班级中用户  -->
	<select id="getUsersInClassByRole" parameterType="int" resultType="User">
		select
            userId, userName, email, loginId, loginName, userRole
        from
            user
        where
           	userId in (
           		select userId from user_cls where clsId = #{inClassId}
           	)
            and userRole = #{userRole}
        order by
            userId ASC
	</select>
	
    <!-- add cjia 2014.8.8 根据班级id查出该班级所有老师的id -->
	<!-- 有两种老师，普通老师角色是2， 幼教老师角色是 9， -->
    <select id="getTeachersOfClass" parameterType="int" resultType="User">
        select
            *
        from
            user
            join user_cls using (userId)
        where
            clsId = #{clsId}
            and userRole in (2, 9)
            <if test="subjectId != 0">
                and userId in (
                    select teaId
                    from tea_subject
                    where subjectId = #{subjectId}
                )
            </if>
    </select>

    <select id="getCountOfClassMember" resultType="int">
        select
            count(*)
        from
            user_cls 
            join user using (userId)
        where
            clsId = #{clsId}
            and userRole = #{userRole}
    </select>

	<!-- edit cjia 2015.1.9  不再使用UserClass对象进行插入数据 -->
    <insert id="insertUserClass" >
        insert into user_cls
            (userId, clsId)
        values
            (#{userId}, #{clsId})
    </insert>

    <delete id="deleteUserClass">
        delete from
            user_cls
        where
            userId = #{userId}
            and clsId = #{clsId}
    </delete>

    <delete id="deleteUserClassByClassId" parameterType="int">
        delete from
            user_cls
        where
            clsId = #{clsId }
    </delete>
       
    <select id="getAllSchema" parameterType="int" resultType="Scm">
        select *
        from scm
        order by scm.scmId
    </select>
   
    <select id="getSchema" resultType="Scm">
        select *
        from scm
        where scm.scmId = #{scmId}
    </select>
   
    <select id="getSchemaBySchoolId" parameterType="int" resultType="Scm">
        select distinct
            scm.scmId,
            scm.scmName,
            school.category
        from
            scm, school_scm, school
        where
            school_scm.schoolId = #{schoolId}
            and school.schoolId = #{schoolId}
            and scm.scmId = school_scm.scmId
    </select>
   
    <select id="getSchemaOutSchool" resultType="Scm">
        select distinct
            scm.scmId,
            scm.scmName
        from
            scm
        where
            scm.scmId not in (
            select scmId 
            from school_scm
            where schoolId = #{schoolId }
        )
    </select>

    <select id="getSchemaIdBySchemaName" resultType="int">
        select
            scmId
        from
            scm
        where
            scmName like #{scmName}
    </select>

    <select id="getAllTextbook" resultType="Book">
        select
            *
        from
            book
    </select>
  
    <select id="getTextbookOfASchool" resultType="Book">
        select distinct
            book.*
        from
            book 
            join scm_book using (bookId)
        where
            scmId in (
                select scmId
                from school_scm
                where schoolId = #{schoolId}
            )
    </select>
     
    <!-- delete not_sure --> 
    <select id="getTextbookForStudent" resultType="Book">
    	(
            select
                book.*
            from
                book join scm_book using (bookId)
            where
                scmId in (
                    select scmId
                    from school_scm
                    where schoolId = #{schoolId}
                )
        )
        union
        (
            select
            	book.*
            from 
            	book join stu_book using (bookId)
            where
            	stuId = #{stuId}
        )
        order by 
            bookId
    </select>
   
    <select id="getTextbookBySchemaId" parameterType="int" resultType="Book">
        select
        	*
        from
            book
        where
            bookId in (
                select
                    bookId
                from
                    scm_book
                where
                    scmId = #{scmId }
        	)
        order by
            bookId
    </select>
   
   	<!-- 查处某个科目老师可以收藏的所有课本 （学校某个科目包含的课本） -->
   	<select id="getTextbookBySchoolId_SubjectId" parameterType="int" resultType="Book" >
   		select
      		*
       from
            book
       where
            book.subjectId = #{subjectId }
            and book.bookId in (
            	select bookId from scm_book
                	where scm_book.scmId in (
                		select school_scm.scmId from school_scm where school_scm.schoolId = #{schoolId}
                	)
            )
   	</select>
   	
    <select id="getTextbookForTeacherExceptFav" parameterType="int" resultType="Book" >
       select
      		*
       from
            book
       where
            book.bookId not in (
                select bookId
                from tea_book
                where teaId = #{userId}                
            )
            and book.subjectId in (
                select subjectId
                from tea_subject
                where teaId = #{userId}
            )
            and book.bookId in (
            	select bookId 
            	from scm_book
                where scm_book.scmId in (
                    select school_scm.scmId 
                    from school_scm 
                    where school_scm.schoolId = #{schoolId}
                )
            )
			order by subjectId
    </select>

    <select id="getTextbookOutOfSchema" parameterType="int" resultType="Book">
        select
        	*
        from
            book
        where true
        <if test="category != -1">
        	and category = #{category }
        </if>
        <if test="subjectId != -1">
        	and subjectId = #{subjectId }
        </if>
        <if test="scmId != -1">
        	and bookId not in (
            	select bookId
                from scm_book
                where scmId = #{scmId }
			)
		</if>
        order by
            bookId
    </select>
    
    <!-- add cjia 2015.3.19 管理员端管理书籍 -->
    <select id="getTextbookCountForAdmin" parameterType="int" resultType="int">
        select
        	count(*)
        from
            book
        where 
        	true
            <if test="category != 0">
                and category = #{category }
            </if>
            <if test="subjectId != 0">
                and subjectId = #{subjectId }
            </if>
            <if test="scmId != 0">
                and bookId in (
                    select bookId
                    from scm_book
                    where scmId = #{scmId }
                )
            </if>
            <if test="grade != 0">
            	and grade = #{grade }
            </if>
        order by
            bookId
    </select>

    <!-- add cjia 2015.3.19 管理员端管理书籍 -->
    <select id="getTextbookForAdmin" parameterType="int" resultType="Book">
        select
        	*
        from
            book
        where 
        	true
            <if test="category != 0">
                and category = #{category }
            </if>
            <if test="subjectId != 0">
                and subjectId = #{subjectId }
            </if>
            <if test="scmId != 0">
                and bookId in (
                    select bookId
                    from scm_book
                    where scmId = #{scmId }
                )
            </if>
            <if test="grade != 0">
            	and grade = #{grade }
            </if>
        order by
            bookId
        limit
            #{limitBegin}, #{pageSize}
    </select>

    <select id="getTextbook" resultType="Book">
        select
            *
        from
            book
        where
            bookId = #{bookId}
    </select>
   
    <select id="getTextbookIdByTextbookName" resultType="int">
        select
            bookId
        from
            book
        where
            bookName like #{bookName}#
    </select>
   
    <select id="getSubjectIdBySubjectName" resultType="int" >
          select
              subjectId
          from
              subject
          where
              subjectName like #{subjectName}
       </select>
   
    <select id="getAllChapter" resultType="Chapter">
        select
            *
        from
            chapter
    </select>

    <select id="getChapterByTextId" resultType="Chapter">
        select
            *
        from
            chapter
        where
            chapter.bookId = #{bookId}
    </select>
   
    <select id="getSectionByTextId" resultType="Section">
        select
            *
        from
            section
        where
            section.chapterId in (
                select
                    chapterId
                from
                    chapter
                where
                    chapter.bookId = #{bookId}
            )
    </select>
   
    <select id="getSectionByChapterId" resultType="Section">
        select
            *
        from
            section
        where
            section.chapterId = #{chapterId}
    </select>
   
    <insert id="insertChapter" parameterType="Chapter" keyProperty="chapterId" useGeneratedKeys="true" >
        insert into chapter
            (chapterName, bookId)
        values
            (#{chapterName}, #{bookId})
    </insert>
   
    <insert id="insertSection" parameterType="Section" keyProperty="sectionId" useGeneratedKeys="true" >
        insert into section
            (sectionName, chapterId)
        values
            (#{sectionName}, #{chapterId})
    </insert>
   
    <insert id="insertSchema" parameterType="Scm" keyProperty="scmId" useGeneratedKeys="true" >
        insert into scm
            (scmName)
        values
            (#{scmName})
    </insert>
   
    <insert id="insertTextbook" parameterType="Book" keyProperty="bookId" useGeneratedKeys="true" >
        insert into book
            (bookName, grade, term, publisher, subjectId, cover)
        values
            (#{bookName}, #{grade}, #{term}, #{publisher}, #{subjectId}, #{cover})
    </insert>
   
    <insert id="insertSchemaTextbook" parameterType="Book">
        insert into scm_book
            (scmId, bookId)
        values
            (#{scmId}, #{bookId})
    </insert>
   
    <delete id="deleteSchemaTextbook" parameterType="int">
        delete from
            scm_book
        where
            scmId = #{selectedSchemaId}
            and bookId = #{bookId}
    </delete>

    <update id="updateTextbook" parameterType="Book">
        update
            book
        set
            bookName = #{bookName},
            subjectId = #{subjectId},
            publisher = #{publisher},
            cover = #{cover},
            grade = #{grade},
            term = #{term}
        where
            bookId = #{bookId}
    </update>
   
    <update id="updateChapter" parameterType="Chapter">
        update
            chapter
        set
            chapterId = #{chapterId},
            chapterName = #{chapterName},
            bookId = #{bookId}
        where
            chapterId = #{chapterId}
    </update>

    <update id="updateSection" parameterType="Section">
        update
            section
        set
            sectionId = #{sectionId},
            sectionName = #{sectionName},
            chapterId = #{chapterId}
        where
            sectionId = #{sectionId}
    </update>
   
    <delete id="deleteChapter" parameterType="int">
        delete from
            chapter
        where
            chapterId = #{chapterId}
    </delete>
   
    <delete id="deleteSection" parameterType="int">
        delete from
            section
        where
            sectionId = #{sectionId}
    </delete>
   
   <!-- add cjia 2014.12.10 老师取消科目时要删除该老师已经收藏的该科目下的课本 -->
   <delete id="deleteTeacherTextbookBySubjectId" >
   		delete from 
   			tea_book
   		where 
   			bookId in (
                select bookId 
                from book
                where subjectId = #{subjectId}
            )
            and teaId = #{teaId}
   </delete>
   
   <!-- add cjia 2014.12.10 删除课本时用于检查userCache的课本是否被删除，如果被删除则清空userCache，没有删除则继续保留userCache  -->
   <select id="getTeacherTextbook" parameterType="int" resultType="TeaBook">
   		select * from tea_book
   		where bookId = #{bookId }
   		and teaId = #{teaId}
   </select>
   
   <delete id="deleteUserClassByUserId" parameterType="int">
   		delete from 
   			user_cls
   		where 
   			userId = #{userId } 
   </delete>
   
   <delete id="deleteTeacterTextbookAllByTeacherId" parameterType="int">
   		delete from tea_book 
   		where teaId = #{teaId}
   </delete>
	
    <insert id="insertUserSubject" parameterType="TeaSubject">
        insert into tea_subject
            (teaId, subjectId)
        values
            (#{teaId}, #{subjectId})
    </insert>

    <delete id="deleteUserSubject">
        delete from
            tea_subject
        where
            teaId = #{teaId}
            and subjectId = #{subjectId}
    </delete>
	
	<delete id="deleteUserSubjectByUserId" parameterType="int">
		delete from 
			tea_subject
		where 
			teaId = #{teaId }
	</delete>	

    <select id="getSchool" parameterType="int" resultType="School">
        select *
        from school
        where school.schoolId = #{schoolId}
    </select>

    <select id="getCategoryedSchoolInRegion" parameterType="int" resultType="School">
        select
            *
        from
            school
        where
            true
            <if test="regionId != 0">
                and school.regionId = #{regionId}
            </if>
            <if test="categoryId != 0">
                and school.category = #{categoryId }
            </if>
    </select>

	<!-- edit cjia 2015.4.24 增加category过滤条件，区分普通管理员和幼教管理员  -->
    <select id="getAllSchoolInCities" resultType="School">
        select
            *
        from
            school
        where 
        	true
        	<if test="category != 0">
                and category = #{category }
            </if>
            <if test="category ==0">
				and category != 6
            </if>
            <if test="provinceId != null and provinceId != '-1'">
                and provinceId = #{provinceId }
            </if>
            <if test="cityId != null and cityId != '-1'">
                and cityId = #{cityId }
            </if>
    </select>
    
    <insert id="insertSchool" useGeneratedKeys="true" keyProperty="schoolId" parameterType="School">
        insert into school
            (schoolName, category, cityId, provinceId, schoolMotto, schoolIcon)
        values
            (#{schoolName}, #{category}, #{cityId}, #{provinceId}, #{schoolMotto}, #{schoolIcon})
    </insert>

    <update id="updateSchool" parameterType="School">
        update
            school
        set
            schoolName = #{schoolName},
            category = #{category},
            cityId = #{cityId},
            provinceId = #{provinceId},
            schoolMotto = #{schoolMotto},
            schoolIcon = #{schoolIcon }
        where
            schoolId = #{schoolId}
    </update>

    <delete id="deleteSchool" parameterType="int">
        delete from school
        where school.schoolId = #{schoolId}
    </delete>

    <select id="getAllProvince" resultType="Province">
        select *
        from province
    </select>

    <select id="getRegion" parameterType="int" resultType="Region">
        select *
        from region
        where region.regionId = #{regionId}
    </select>

    <select id="getCity" parameterType="String" resultType="City">
        select *
        from city
        where city.cityId = #{cityId}
    </select>

    <select id="getCityByProvinceId" parameterType="String" resultType="City">
        select *
        from city
        where city.provinceId = #{provinceId}
    </select>

    <select id="getClassEnterYearList" resultType="Integer">
        select
            distinct(entranceYear)
        from
            cls
        where
            schoolId = #{schoolId }
        order by
            cls.entranceYear DESC
    </select>

    <select id="getClassInfo" parameterType="int" resultType="Cls">
        select
            cls.clsId,
            cls.clsName,
            cls.entranceYear,
            cls.schoolId,
            school.schoolName,
            school.category,
            school.cityId,
            school.provinceId
        from
            cls join school using(schoolId)
        where
            cls.clsId = #{clsId}
    </select>

    <select id="getSchoolClassCount" parameterType="int"  resultType="int">
        select
            count(*)
        from
            cls
        where
            cls.schoolId = #{schoolId }
    </select>

    <select id="getClassByGrade" parameterType="int" resultType="Cls">
        select
            cls.clsId,
            cls.clsName,
            cls.entranceYear,
            cls.schoolId,
            school.schoolName,
            school.category,
            school.cityId,
            school.provinceId
        from
            cls, school
        where
            cls.schoolId = #{schoolId}
            and cls.entranceYear = #{entranceYear}
            and school.schoolId = cls.schoolId
        order by
            cls.clsId ASC
    </select>

	<select id="getClassListOfAUser" parameterType="int" resultType="Cls">
		select 
			*
		from 
			user_cls
			join cls using (clsId)
			join school using (schoolId)
		where
			userId = #{userId}
	</select>
    
    <!-- edit cjia 2015.1.12 增加过滤条件 -->
	<select id="getOtherClassListOfASchool" parameterType="int" resultType="Cls">
		select 
			*
		from 
			cls
		where 
			schoolId = #{schoolId }
			<if test="clsId != 0">
				and clsId != #{clsId}
			</if>
		order by 
			clsId ASC
	</select>
    
    <insert id="insertClass" parameterType="Cls">
        insert into cls
            (clsName, entranceYear, schoolId)
        values
            (#{clsName}, #{entranceYear}, #{schoolId})
    </insert>

    <update id="updateClass" parameterType="Cls">
        update
            cls
        set
            clsName = #{clsName},
            entranceYear = #{entranceYear},
            schoolId = #{schoolId}
        where
            clsId = #{clsId}
    </update>

    <delete id="deleteClass" parameterType="int">
        delete from
            cls
        where
            cls.clsId = #{clsId}
    </delete>
    
    <select id="getSchoolSchemaBySchoolId" parameterType="int" resultType="SchoolScm">
        select
            school_scm.schoolId,
            school_scm.scmId,
            school.schoolName,
            school.category,
            scm.scmName
        from
            school_scm, school, scm
        where
            school_scm.schoolId = #{schoolId}
            and school.schoolId = school_scm.schoolId
            and scm.scmId = school_scm.scmId
    </select>

    <insert id="insertSchoolSchema" parameterType="SchoolScm">
        insert into school_scm
            (schoolId, scmId)
        values
            (#{schoolId}, #{scmId})
    </insert>

    <delete id="deleteSchoolSchema">
        delete from
            school_scm
        where
            schoolId = #{schoolId}
            and scmId = #{scmId}
    </delete>

    <select id="getAllSubject" resultType="Subject">
        select
            *
        from
            subject
    </select>

    <select id="getSubject" parameterType="int" resultType="Subject">
        select
            *
        from
            subject
        where
            subjectId = #{subjectId}
    </select>

    <!--add cjia 2014.7.17 -->
    <select id="getTeacherSubjects" parameterType="int" resultType="Subject" >
        select
        	*
        from
            subject
        where
            subjectId in (
                select subjectId
                from tea_subject
                where teaId = #{teaId }
        	)
    </select>
   
    <!-- search all subjects of a school -->
    <select id="getSchoolSubjects" parameterType="int" resultType="Subject">
        select
            distinct subject.*
        from 
            school_scm 
            join scm_book using (scmId)
            join book using (bookId)
            join subject using (subjectId)
        where 
            schoolId = #{schoolId}
        order by 
        	subjectId
    </select>

    <select id="getAllRemark" resultType="Remark">
        select *
        from remark
    </select>

	
	<!-- notification -->
	<select id="getNotification" parameterType="int" resultType="Notification">
		select 
			*
		from
			notification
		where 
			notificationId = #{notificationId}
	</select>
	
	<select id="getSelfCreatedNotificationCount" parameterType="int" resultType="int">
		select
			count(*)
		from
			notification
		where
			creatorId = #{userId}
			and isDeleted = 0
			<if test="createTime != 0">
			and createTime &lt;= #{createTime}
			</if>
	</select>
	
	<select id="getSelfCreatedNotification" parameterType="int" resultType="Notification">
		select
			*
		from
			notification
		where
			creatorId = #{userId}
			and isDeleted = 0
			<if test="createTime != 0">
			and createTime &lt;= #{createTime}
			</if>
            order by 
            	createTime desc
			limit
              #{limitBegin}, #{pageSize}
	</select>
	
	<select id="getReceivedNotificationCount" parameterType="int" resultType="int">
		select
			count(*)
		from
			notification join user_notification using (notificationId)
		where
			user_notification.userId = #{userId}
			and notification.isDeleted = 0
			<if test="createTime != 0">
			and notification.createTime &lt;= #{createTime}
			</if>
	</select>
	
	<select id="getReceivedNotification" parameterType="int" resultType="Notification">
		select
			*
		from
			notification join user_notification using (notificationId)
		where
			user_notification.userId = #{userId}
			and notification.isDeleted = 0
			<if test="createTime != 0">
			and notification.createTime &lt;= #{createTime}
			</if>
            order by 
            	notification.createTime desc
			limit
              #{limitBegin}, #{pageSize}
	</select>
	
	
	
	<insert id="insertUserNotification">
		insert into user_notification
		 	(userId, notificationId)
		 values
		     <foreach collection="list" item="item" index="index" separator="," >
		     (#{item.userId}, #{item.notificationId} ) 
		     </foreach>
	</insert>
	
	<update id="setUserNotificationReaded" parameterType="int">
		update
			user_notification
		set
			isReaded = 1
		where
			userId = #{userId}
			and notificationId = #{notificationId}
	</update>

	<select id="getOneNotificationReceiveCount" parameterType="int" resultType="int">
		select
			count(*)
		from
			user_notification
		where
			notificationId = #{notificationId}
	</select>
	
	<select id="getOneNotificationReadedCount" parameterType="int" resultType="int">
				select
			count(*)
		from
			user_notification
		where
			notificationId = #{notificationId}
			and isReaded = 1
	</select>
	
	<select id="getUnReadedReceivedNotificationCount" parameterType="int" resultType="int">
		select 
			count(*)
		from
			user_notification
		where
			userId = #{userId}
			and isReaded = 0
	</select>
	
	<insert id="insertUserChatToken" parameterType="UserChatToken">
		insert into user_chat_token
			(userId, token)
		values
			(#{userId}, #{token})
	</insert>
	
	<select id="getUserChatToken" parameterType="int" resultType="UserChatToken">
		select
			*
		from 
			user_chat_token
		where
			userId = #{userId}
	</select>
	
	<select id="getAllUsersOfSchoolByUserRole" parameterType="int" resultType="User">
		select 
			*
		from
			user
		where 
			schoolId = #{schoolId}
			<if test="userRole != 0">
				and userRole = #{userRole}
			</if>
	</select>	
</mapper>
