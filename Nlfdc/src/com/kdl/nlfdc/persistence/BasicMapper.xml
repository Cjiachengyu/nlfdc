<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kdl.nlfdc.persistence.BasicMapper">

	<select id="getVisitCount" parameterType="int" resultType="VisitCount" >
		select
			*
		from
			visit_count
		where
			day = #{day}
	</select>
	
	<select id="getSumVisitCount" resultType="int" >
		select
			SUM(count)
		from
			visit_count
	</select>
	
	<insert id="insertVisitCount" parameterType="VisitCount" >
		insert into visit_count
			(day, count)
		values
			(#{day}, #{count})
	</insert>
	
	<update id="updateVisitCount" parameterType="VisitCount" >
		update
			visit_count
		set
			count = #{count}
		where
			day = #{day}
	</update>
	
	<select id="getFirstMenu" parameterType="int" resultType="FirstMenu">
		select
			*
		from
			first_menu
		where
			firstMenuId = #{firstMenuId}
	</select>	
	
	<select id="getAllFirstMenu" resultType="FirstMenu">
		select
			*
		from
			first_menu
	</select>
	
	<select id="getAllFirstMenuWithSecondMenu" resultType="FirstMenuWithSecondMenu">
		select
			*
		from
			first_menu
	</select>
	
	<select id="getSecondMenu" parameterType="int" resultType="SecondMenu">
		select
			*
		from
			second_menu
		where
			secondMenuId = #{secondMenuId}
	</select>
	
	<select id="getSecondMenuByFirstMenuId" parameterType="int" resultType="SecondMenu">
		select
			*
		from
			second_menu
		where
			firstMenuId = #{firstMenuId}
	</select>
	
	<select id="getAdminMenus" parameterType="int" resultType="AdminMenu" >
		select
			admin_menu.*, first_menu.firstMenuName
		from
			admin_menu join first_menu using (firstMenuId)
		where
			adminId = #{adminId}
	</select>

	<delete id="deleteAdminMenu" parameterType="int">
		delete from admin_menu
		where adminId = #{adminId}
	</delete>
	
	<insert id="insertAdminMenu" parameterType="AdminMenu">
		insert into admin_menu (adminId, firstMenuId)
		values (#{adminId}, #{firstMenuId})
	</insert>
	
	<insert id="insertAdminAndGetAdminId" useGeneratedKeys="true" keyProperty="adminId" parameterType="Admin">
		insert into admin (loginName, adminName, adminRole, password)
		values (#{loginName}, #{adminName}, #{adminRole}, #{password})
	</insert>
		
	<select id="getAdminByAdminId" parameterType="int" resultType="Admin">
		select
			*
		from 
			admin
		where
			adminId = #{adminId }
	</select>	
	
	<select id="getAdminByLoginName" parameterType="String" resultType="Admin">
		select
			*
		from
			admin
		where
			loginName = #{loginName }
			and isDeleted = 0
	</select>
	
	<select id="getAdminByLoginNameIgnoreDelete" parameterType="String" resultType="Admin">
		select
			*
		from
			admin
		where
			loginName = #{loginName }
	</select>
	
	<select id="getAllCommonAdmin" resultType="Admin">
		select
			*
		from
			admin
		where
			adminRole = 1
	</select>
	
	<update id="disableAdmin" parameterType="int">
		update admin
	    set isDeleted = 1
	    where adminId = #{adminId}
	</update>
	
	<update id="enableAdmin" parameterType="int">
		update admin
	    set isDeleted = 0
	    where adminId = #{adminId}
	</update>

	<select id="getAdminNotificationCount" parameterType="int" resultType="int">
		select
			count(*)
		from
			notification
		where
			true
			<if test="firstMenuId != 0">
			and firstMenuId = #{firstMenuId}
			</if>
			<if test="secondMenuId != 0">
			and secondMenuId = #{secondMenuId}
			</if>
			order by createTime desc
	</select>

	<select id="getAdminNotificationList" parameterType="int" resultType="Notification">
		select
			notification.*, second_menu.secondMenuName
		from
			notification join second_menu using(secondMenuId)
		where
			true
			<if test="firstMenuId != 0">
			and notification.firstMenuId = #{firstMenuId}
			</if>
			<if test="secondMenuId != 0">
			and notification.secondMenuId = #{secondMenuId}
			</if>
			order by createTime desc
			limit 
			#{limitBegin}, #{pageSize}
	</select>

	<select id="getCommonNotificationCount" parameterType="int" resultType="int">
		select
			count(*)
		from
			notification
		where
			isDeleted = 0
			<if test="firstMenuId != 0">
			and firstMenuId = #{firstMenuId}
			</if>
			<if test="secondMenuId != 0">
			and secondMenuId = #{secondMenuId}
			</if>
			order by createTime desc
	</select>

	<select id="getCommonNotificationList" parameterType="int" resultType="Notification">
		select
			notification.*, second_menu.secondMenuName
		from
			notification join second_menu using(secondMenuId)
		where
			notification.isDeleted = 0
			<if test="firstMenuId != 0">
			and notification.firstMenuId = #{firstMenuId}
			</if>
			<if test="secondMenuId != 0">
			and notification.secondMenuId = #{secondMenuId}
			</if>
			order by createTime desc
			limit 
			#{limitBegin}, #{pageSize}
	</select>
	
	<select id="getSearchNotificationListCount" resultType="int">
		select count(*) 
		from notification
		where 
			title like #{searchText}
	</select>
	
	<select id="getSearchNotificationList" resultType="Notification">
		select notification.*, second_menu.secondMenuName
		from notification join second_menu using (secondMenuId)
		where 
			title like #{searchText}
		limit #{limitBegin}, #{pageSize}
	</select>
		
	<insert id="insertNotification" useGeneratedKeys="true" keyProperty="notificationId" parameterType="Notification">
		insert into notification 
			(firstMenuId, secondMenuId, creatorId, createTime, title, content) 
		values 
			(#{firstMenuId}, #{secondMenuId}, #{creatorId }, #{createTime }, #{title }, #{content })
	</insert>
	
	<update id="deleteNotification" parameterType="int" >
		update 
			notification
		set 
			isDeleted = 1
		where
			notificationId = #{notificationId}
	</update>

	<update id="unDeleteNotification" parameterType="int" >
		update 
			notification
		set 
			isDeleted = 0
		where
			notificationId = #{notificationId}
	</update>

	<select id="getImageList" parameterType="int" resultType="Image">
		select 
			image.*, notification.title as notificationTitle
		from 
			image join notification using (notificationId)
		where
			type = #{type}
	</select>

	<update id="updateImage" parameterType="Image">
		update
			image
		set
			type = #{type},
			imageUrl = #{imageUrl},
			notificationId = #{notificationId}
		where
			imageId = #{imageId}
	</update>
	
	<update id="updateImageNotificationId" parameterType="int">
		update
			image
		set
			notificationId = #{notificationId}
		where
			imageId = #{imageId}
	</update>	
	
		
	<!-- notification -->
	<select id="getNotification" parameterType="int" resultType="Notification">
		select 
			*
		from
			notification
		where 
			notificationId = #{notificationId}
	</select>
	
	<select id="getSelfCreatedNotificationCount" parameterType="int" resultType="int">
		select
			count(*)
		from
			notification
		where
			creatorId = #{userId}
			and isDeleted = 0
			<if test="createTime != 0">
			and createTime &lt;= #{createTime}
			</if>
	</select>
	
	<select id="getSelfCreatedNotification" parameterType="int" resultType="Notification">
		select
			*
		from
			notification
		where
			creatorId = #{userId}
			and isDeleted = 0
			<if test="createTime != 0">
			and createTime &lt;= #{createTime}
			</if>
            order by 
            	createTime desc
			limit
              #{limitBegin}, #{pageSize}
	</select>
	
	<select id="getReceivedNotificationCount" parameterType="int" resultType="int">
		select
			count(*)
		from
			notification join user_notification using (notificationId)
		where
			user_notification.userId = #{userId}
			and notification.isDeleted = 0
			<if test="createTime != 0">
			and notification.createTime &lt;= #{createTime}
			</if>
	</select>
	
	<select id="getReceivedNotification" parameterType="int" resultType="Notification">
		select
			*
		from
			notification join user_notification using (notificationId)
		where
			user_notification.userId = #{userId}
			and notification.isDeleted = 0
			<if test="createTime != 0">
			and notification.createTime &lt;= #{createTime}
			</if>
            order by 
            	notification.createTime desc
			limit
              #{limitBegin}, #{pageSize}
	</select>
	
	
	
	<insert id="insertUserNotification">
		insert into user_notification
		 	(userId, notificationId)
		 values
		     <foreach collection="list" item="item" index="index" separator="," >
		     (#{item.userId}, #{item.notificationId} ) 
		     </foreach>
	</insert>
	
	<update id="setUserNotificationReaded" parameterType="int">
		update
			user_notification
		set
			isReaded = 1
		where
			userId = #{userId}
			and notificationId = #{notificationId}
	</update>

	<select id="getOneNotificationReceiveCount" parameterType="int" resultType="int">
		select
			count(*)
		from
			user_notification
		where
			notificationId = #{notificationId}
	</select>
	
	<select id="getOneNotificationReadedCount" parameterType="int" resultType="int">
				select
			count(*)
		from
			user_notification
		where
			notificationId = #{notificationId}
			and isReaded = 1
	</select>
	
	<select id="getUnReadedReceivedNotificationCount" parameterType="int" resultType="int">
		select 
			count(*)
		from
			user_notification
		where
			userId = #{userId}
			and isReaded = 0
	</select>
	
</mapper>
